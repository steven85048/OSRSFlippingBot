package Client;

/*
 * Main Client Container - Receives commands from the CommandGenerator and runs them sequentially
 * in the poll method. Does not directly handle the context!
 */

import java.util.LinkedList;
import java.util.Queue;

import org.powerbot.script.PollingScript;
import org.powerbot.script.Script;
import org.powerbot.script.rt4.ClientContext;

import Commands.Command;
import Commands.CommandGenerator;
import Commands.ContextContainer;
import DefaultActions.DefaultHandler;

@Script.Manifest(name = "GeExchange", description = "Flipping Bot")
public class OSRSFlipper extends PollingScript<ClientContext> {

	// ===========================================================================
	// INSTANCE VARIABLES
	// ===========================================================================

	private CommandGenerator generator;
	private Queue<Command> commandList;
	private DefaultHandler defaultHandler;
	private ContextContainer contextContainer;
	private ClientState clientState;
	
	private int id;

	// ===========================================================================
	// MAIN FUNCTIONS
	// ===========================================================================

	// Initialize the worker classes that will be used within the tasks
	@Override
	public void start() {
		// id of this client
		id = 0;
		
		// queue for commands
		commandList = new LinkedList<Command>();
		
		// create the context container
		contextContainer = new ContextContainer(ctx);
		
		// Create client State
		clientState = new ClientState(ctx, contextContainer.getInv(), contextContainer.getGE());
		contextContainer.setClientState(clientState);
		
		// get singleton instance of generator and add context
		generator = CommandGenerator.getInstance();
		generator.addContext(contextContainer, commandList);

		// Default command init
		defaultHandler = new DefaultHandler(contextContainer, commandList);
		
		generator.addCommand(id);
	}

	// Method that will be continuously called for this client
	@Override
	public void poll() {
		defaultHandler.defaultAction();
		
		/*
		// start by updating the client state
		clientState.updateClientState();

		// always prioritize running commands
		if (!commandList.isEmpty() && commandList.peek().isRunnable()) {
			
			// run the top of the queue's command
			Command currCommand = commandList.poll();
			currCommand.command();
			
			// add that transaction to the list of active transactions
			clientState.addTransaction(currCommand.activeTransaction());
			
			// Wait a bit until next command
			try {
				Thread.sleep(1000);
			} catch (Exception e) {
				e.printStackTrace();
			}
		} else {
			// Default background activity
			defaultHandler.defaultAction();
		}
		*/
	}

	// Cleanup method to deallocate resources
	@Override
	public void stop() {

	}
}
