package Client;

import java.util.ArrayList;
import java.util.HashMap;

/*
 * Class that contains and updates the current user state
 */

import org.powerbot.script.rt4.ClientAccessor;
import org.powerbot.script.rt4.ClientContext;
import org.powerbot.script.rt4.Item;

import Transaction.ActiveTransaction;
import Transaction.CompletedTransaction;
import Transaction.ItemPurchaseData;
import Utility.GrandExchange;
import Utility.Inventory;
import Utility.Timer;

public class ClientState extends ClientAccessor {

	public int FREEMIUM_SLOT = 5;

	// ===========================================================================
	// INSTANCE VARIABLES
	// ===========================================================================

	private Inventory inv;
	private GrandExchange ge;

	private int goldCount;
	private Item[] inventory;
	private int emptySlots;
	private HashMap<String, ItemPurchaseData> purchaseMap;
	private ArrayList<ActiveTransaction> activeTransactions;

	public ClientState(ClientContext ctx, Inventory inv, GrandExchange ge) {
		super(ctx);

		this.inv = inv;
		this.ge = ge;

		updateClientState();
		purchaseMap = new HashMap<String, ItemPurchaseData>();
		activeTransactions = new ArrayList<ActiveTransaction>();
	}

	// SETTERS for the client state

	public void updateClientState() {
		setGoldCount();
		setEmptySlots();
	}

	// ===========================================================================
	// TRANSACTION METHODS
	// ===========================================================================

	// Updates the active transactions with the
	public void transactionCompletionHandler() {
		// Get the updated transactions
		ArrayList<ActiveTransaction> updatedTransactions = new ArrayList<ActiveTransaction>();

		// get the current active transactions
		ArrayList<ActiveTransaction> currTransactions = ge.getSlotPurchase();

		// Compare those with the previous iteration's active transactions (only
		// 64 max iterations so w/e)
		for (int i = 0; i < activeTransactions.size(); i++) {
			boolean match = false;

			ActiveTransaction aTransaction = activeTransactions.get(i);

			for (int j = 0; j < currTransactions.size(); j++) {
				// Determine if matching
				ActiveTransaction bTransaction = currTransactions.get(j);

				// check if match
				if (transactionMatch(aTransaction, bTransaction)) {
					match = true;

					// Perform quant diff
					int quantDiff = Math.abs(aTransaction.getItemQuantityTerm() - bTransaction.getItemQuantityTerm());
					int priceDiff = Math.abs(aTransaction.getPriceTerm() - bTransaction.getPriceTerm());

					if (transactionHandler(quantDiff, priceDiff, aTransaction)) {
						updatedTransactions.add(bTransaction);
					}

					break;
				}
			}

			// if there is no match, that transaction just completed!
			if (!match) {
				// HAVE to look at history for these completed transaction!
				int[] transactionPair = ge.findCompletedTransactionData(aTransaction);
				boolean transactionSaved = transactionHandler(transactionPair[0], transactionPair[1], aTransaction);
			}
		}
		
		// Reset the transactions
		activeTransactions = updatedTransactions;
	}

	public boolean transactionHandler(int quantDiff, int priceDiff, ActiveTransaction transaction) {
		// completed transaction object to set
		CompletedTransaction completedTransaction;

		// Check if the difference has changed
		if (quantDiff != 0 && priceDiff != 0) {
			// Generate a completed transaction
			completedTransaction = new CompletedTransaction(transaction.getItemName(), quantDiff, priceDiff,
					Timer.getCurrentTime() - transaction.getStartTime(), transaction.isBuyOrSell());
			
			System.out.println(completedTransaction.toString());
			
			// TODO: Save this transaction to the map
			
			// Notify that a completed transaction has occurred
			return true;
		}

		return false;
	}

	// Determines if the two transactions match
	public boolean transactionMatch(ActiveTransaction aTransaction, ActiveTransaction bTransaction) {
		if (aTransaction.getItemName().equals(bTransaction.getItemName())
				&& (aTransaction.isBuyOrSell() && bTransaction.isBuyOrSell())
				&& (aTransaction.getItemQuantity() == bTransaction.getItemQuantity())
				&& (aTransaction.getItemCost() == bTransaction.getItemCost()))
			return true;
		else
			return false;

	}

	// ===========================================================================
	// SETTERS
	// ===========================================================================

	public void setGoldCount() {
		this.goldCount = inv.getGoldCount();
	}

	public void setItems() {
		this.inventory = inv.getItems();
	}

	public void setEmptySlots() {
		this.emptySlots = ge.getAvailableSlots() - FREEMIUM_SLOT;
	}

	public void addTransaction(ActiveTransaction transaction) {
		activeTransactions.add(transaction);
	}

	// ===========================================================================
	// GETTERS
	// ===========================================================================

	public int getGoldCount() {
		return this.goldCount;
	}

	public Item[] getItems() {
		return this.inventory;
	}

	public int getEmptySlots() {
		return this.emptySlots;
	}
}
